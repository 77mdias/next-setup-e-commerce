import Stripe from "stripe";

// Valida√ß√£o das vari√°veis de ambiente
const validateStripeConfig = () => {
  const errors: string[] = [];

  if (!process.env.STRIPE_SECRET_KEY) {
    errors.push("STRIPE_SECRET_KEY n√£o est√° definida");
  }

  if (!process.env.NEXT_PUBLIC_BASE_URL) {
    errors.push("NEXT_PUBLIC_BASE_URL n√£o est√° definida");
  }

  if (errors.length > 0) {
    console.error("‚ùå Erros de configura√ß√£o do Stripe:", errors);
    throw new Error(`Configura√ß√£o do Stripe inv√°lida: ${errors.join(", ")}`);
  }

  console.log("‚úÖ Configura√ß√£o do Stripe validada com sucesso");
  console.log("üîß Ambiente:", process.env.NODE_ENV);
  console.log("üîß Base URL:", process.env.NEXT_PUBLIC_BASE_URL);
  console.log(
    "üîß Stripe Key:",
    process.env.STRIPE_SECRET_KEY?.substring(0, 10) + "...",
  );
};

// Validar configura√ß√£o na inicializa√ß√£o
validateStripeConfig();

export const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: "2025-07-30.basil",
});

// Fun√ß√£o para criar sess√£o com logs detalhados
export const createStripeCheckoutSession = async (sessionData: any) => {
  try {
    console.log("üîß Iniciando cria√ß√£o da sess√£o do Stripe");
    console.log("üîß Dados da sess√£o:", {
      itemsCount: sessionData.line_items?.length || 0,
      mode: sessionData.mode,
      successUrl: sessionData.success_url,
      cancelUrl: sessionData.cancel_url,
      customerEmail: sessionData.customer_email,
    });

    const session = await stripe.checkout.sessions.create(sessionData);

    console.log("‚úÖ Sess√£o do Stripe criada com sucesso:", {
      sessionId: session.id,
      url: session.url,
    });

    return session;
  } catch (error) {
    console.error("‚ùå Erro ao criar sess√£o do Stripe:", error);

    if (error instanceof Stripe.errors.StripeError) {
      console.error("‚ùå Erro espec√≠fico do Stripe:", {
        type: error.type,
        code: error.code,
        message: error.message,
        decline_code: (error as any).decline_code,
      });
    }

    throw error;
  }
};
