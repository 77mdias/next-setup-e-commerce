generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                       String               @id @default(uuid())
  email                    String               @unique
  password                 String?
  name                     String?
  phone                    String?
  cpf                      String?              @unique
  role                     UserRole             @default(CUSTOMER)
  emailVerified            DateTime?
  isActive                 Boolean              @default(false)
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  image                    String?
  emailVerificationExpires DateTime?
  emailVerificationToken   String?
  resetPasswordExpires     DateTime?
  resetPasswordToken       String?
  accounts                 Account[]
  addresses                Address[]
  cart                     Cart[]
  statusChanges            OrderStatusHistory[]
  orders                   Order[]
  reviews                  Review[]
  sessions                 Session[]
  stockMovements           StockMovement[]
  stores                   Store[]
  wishlist                 Wishlist[]

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Store {
  id             String      @id @default(uuid())
  ownerId        String
  name           String
  slug           String      @unique
  description    String
  phone          String
  email          String
  cnpj           String?
  website        String?
  shippingFee    Float       @default(0)
  freeShipping   Float       @default(0)
  processingTime Int         @default(1)
  isActive       Boolean     @default(true)
  rating         Float       @default(0)
  totalSales     Int         @default(0)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  inventory      Inventory[]
  orders         Order[]
  products       Product[]
  reviews        Review[]
  owner          User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("stores")
}

model Brand {
  id        String    @id @default(uuid())
  name      String    @unique
  slug      String    @unique
  logoUrl   String?
  website   String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("brands")
}

model Category {
  id          String     @id @default(uuid())
  parentId    String?
  name        String
  slug        String     @unique
  description String?
  imageUrl    String?
  iconUrl     String?
  sortOrder   Int        @default(0)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
}

model Product {
  id             String           @id @default(uuid())
  storeId        String
  brandId        String
  categoryId     String
  sku            String           @unique
  name           String
  description    String
  shortDesc      String?
  price          Float
  originalPrice  Float?
  costPrice      Float?
  images         String[]
  specifications Json
  warranty       String?
  weight         Float?
  dimensions     Json?
  isActive       Boolean          @default(true)
  isFeatured     Boolean          @default(false)
  isOnSale       Boolean          @default(false)
  saleStartsAt   DateTime?
  saleEndsAt     DateTime?
  rating         Float            @default(0)
  reviewCount    Int              @default(0)
  soldCount      Int              @default(0)
  viewCount      Int              @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  cart           Cart[]
  inventory      Inventory[]
  orderItems     OrderItem[]
  variants       ProductVariant[]
  brand          Brand            @relation(fields: [brandId], references: [id], onDelete: Cascade)
  category       Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  store          Store            @relation(fields: [storeId], references: [id], onDelete: Cascade)
  reviews        Review[]
  wishlist       Wishlist[]

  @@map("products")
}

model ProductVariant {
  id         String      @id @default(uuid())
  productId  String
  name       String
  value      String
  price      Float?
  sku        String?
  stock      Int         @default(0)
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  inventory  Inventory[]
  orderItems OrderItem[]
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model Inventory {
  id             String          @id @default(uuid())
  productId      String
  variantId      String?
  storeId        String
  quantity       Int             @default(0)
  reserved       Int             @default(0)
  minStock       Int             @default(0)
  maxStock       Int             @default(1000)
  location       String?
  lastRestocked  DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  product        Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  store          Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)
  variant        ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  stockMovements StockMovement[]

  @@unique([productId, variantId, storeId])
  @@map("inventory")
}

model StockMovement {
  id          String        @id @default(uuid())
  inventoryId String
  type        StockMoveType
  quantity    Int
  reason      String
  reference   String?
  userId      String?
  createdAt   DateTime      @default(now())
  inventory   Inventory     @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  user        User?         @relation(fields: [userId], references: [id])

  @@map("stock_movements")
}

model Order {
  id                Int                  @id @default(autoincrement())
  userId            String?
  storeId           String
  addressId         String?
  customerName      String
  customerPhone     String
  customerEmail     String?
  customerCpf       String?
  status            OrderStatus
  shippingMethod    ShippingMethod
  subtotal          Float
  shippingFee       Float                @default(0)
  serviceFee        Float                @default(0)
  discount          Float                @default(0)
  total             Float
  paymentMethod     String?
  paymentStatus     PaymentStatus        @default(PENDING)
  stripePaymentId   String?
  trackingCode      String?
  notes             String?
  estimatedDelivery DateTime?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  cancelledAt       DateTime?
  cancelReason      String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  items             OrderItem[]
  statusHistory     OrderStatusHistory[]
  address           Address?             @relation(fields: [addressId], references: [id])
  store             Store                @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user              User?                @relation(fields: [userId], references: [id])
  payments          Payment[]
  reviews           Review[]

  @@map("orders")
}

model OrderItem {
  id             String          @id @default(uuid())
  orderId        Int
  productId      String
  variantId      String?
  quantity       Int
  unitPrice      Float
  totalPrice     Float
  productName    String
  productImage   String
  specifications Json?
  createdAt      DateTime        @default(now())
  order          Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product        Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant        ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model OrderStatusHistory {
  id        String      @id @default(uuid())
  orderId   Int
  status    OrderStatus
  notes     String?
  changedBy String?
  createdAt DateTime    @default(now())
  user      User?       @relation(fields: [changedBy], references: [id])
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_status_history")
}

model Payment {
  id                 String        @id @default(uuid())
  orderId            Int
  method             String
  amount             Float
  status             PaymentStatus
  stripePaymentId    String?
  stripeClientSecret String?
  pixCode            String?
  pixExpiresAt       DateTime?
  boletoUrl          String?
  boletoBarcode      String?
  paidAt             DateTime?
  failedAt           DateTime?
  failureReason      String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  order              Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Address {
  id           String   @id @default(uuid())
  userId       String?
  label        String
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipCode      String
  country      String   @default("Brasil")
  latitude     Float?
  longitude    Float?
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders       Order[]

  @@map("addresses")
}

model Review {
  id                 String    @id @default(uuid())
  userId             String
  productId          String
  orderId            Int
  storeId            String
  rating             Int
  title              String?
  comment            String?
  pros               String?
  cons               String?
  wouldRecommend     Boolean?
  isVerifiedPurchase Boolean   @default(false)
  isPublic           Boolean   @default(true)
  storeReply         String?
  repliedAt          DateTime?
  helpfulCount       Int       @default(0)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  order              Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product            Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  store              Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, orderId])
  @@map("reviews")
}

model Coupon {
  id            String     @id @default(uuid())
  code          String     @unique
  name          String
  description   String?
  type          CouponType
  value         Float
  minOrderValue Float?
  maxDiscount   Float?
  usageLimit    Int?
  usedCount     Int        @default(0)
  startsAt      DateTime
  expiresAt     DateTime
  isActive      Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("coupons")
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlists")
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("carts")
}

enum UserRole {
  CUSTOMER
  SELLER
  ADMIN
}

enum StockMoveType {
  IN
  OUT
  ADJUSTMENT
  RESERVED
  RELEASED
}

enum OrderStatus {
  PENDING
  PAYMENT_PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum ShippingMethod {
  STANDARD
  EXPRESS
  PICKUP
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

enum CouponType {
  PERCENTAGE
  FIXED
}
